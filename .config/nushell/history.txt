ls
nvim 
termux-setup-storage 
which nu
chsh 
l
chsh 
exit 
chsh 
v .bashrc
nvim  .bashrc
pkg search nix
pkg i zoxide
cd ~/.config/nushell/
ls
zoxide 
zoxide init
zoxide init nu
zoxide init nushell
/# Code generated by zoxide. DO NOT EDIT.<\n><\n># =============================================================================<\n>#<\n># Hook configuration for zoxide.<\n>#<\n><\n># Initialize hook to add new entries to the database.<\n>export-env {<\n>  $env.config = (<\n>    $env.config?<\n>    | default {}<\n>    | upsert hooks { default {} }<\n>    | upsert hooks.env_change { default {} }<\n>    | upsert hooks.env_change.PWD { default [] }<\n>  )<\n>  let __zoxide_hooked = (<\n>    $env.config.hooks.env_change.PWD | any { try { get __zoxide_hook } catch { false } }<\n>  )<\n>  if not $__zoxide_hooked {<\n>    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {<\n>      __zoxide_hook: true,<\n>      code: {|_, dir| zoxide add -- $dir}<\n>    })<\n>  }<\n>}<\n><\n># =============================================================================<\n>#<\n># When using zoxide with --no-cmd, alias these internal functions as desired.<\n>#<\n><\n># Jump to a directory using only keywords.<\n>def --env --wrapped __zoxide_z [...rest: string] {<\n>  let path = match $rest {<\n>    [] => {'~'},<\n>    [ '-' ] => {'-'},<\n>    [ $arg ] if ($arg | path expand | path type) == 'dir' => {$arg}<\n>    _ => {<\n>      zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n"<\n>    }<\n>  }<\n>  cd $path<\n>}<\n><\n># Jump to a directory using interactive search.<\n>def --env --wrapped __zoxide_zi [...rest:string] {<\n>  cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'<\n>}<\n><\n># =============================================================================<\n>#<\n># Commands for zoxide. Disable these using --no-cmd.<\n>#<\n><\n>alias z = __zoxide_z<\n>alias zi = __zoxide_zi<\n><\n># =============================================================================<\n>#<\n># Add this to your env file (find it by running `$nu.env-path` in Nushell):<\n>#<\n>#   zoxide init nushell | save -f ~/.zoxide.nu<\n>#<\n># Now, add this to the end of your config file (find it by running<\n># `$nu.config-path` in Nushell):<\n>#<\n>#   source ~/.zoxide.nu<\n>#<\n># Note: zoxide only supports Nushell v0.89.0+.
# Code generated by zoxide. DO NOT EDIT.<\n><\n># =============================================================================<\n>#<\n># Hook configuration for zoxide.<\n>#<\n><\n># Initialize hook to add new entries to the database.<\n>export-env {<\n>  $env.config = (<\n>    $env.config?<\n>    | default {}<\n>    | upsert hooks { default {} }<\n>    | upsert hooks.env_change { default {} }<\n>    | upsert hooks.env_change.PWD { default [] }<\n>  )<\n>  let __zoxide_hooked = (<\n>    $env.config.hooks.env_change.PWD | any { try { get __zoxide_hook } catch { false } }<\n>  )<\n>  if not $__zoxide_hooked {<\n>    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {<\n>      __zoxide_hook: true,<\n>      code: {|_, dir| zoxide add -- $dir}<\n>    })<\n>  }<\n>}<\n><\n># =============================================================================<\n>#<\n># When using zoxide with --no-cmd, alias these internal functions as desired.<\n>#<\n><\n># Jump to a directory using only keywords.<\n>def --env --wrapped __zoxide_z [...rest: string] {<\n>  let path = match $rest {<\n>    [] => {'~'},<\n>    [ '-' ] => {'-'},<\n>    [ $arg ] if ($arg | path expand | path type) == 'dir' => {$arg}<\n>    _ => {<\n>      zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n"<\n>    }<\n>  }<\n>  cd $path<\n>}<\n><\n># Jump to a directory using interactive search.<\n>def --env --wrapped __zoxide_zi [...rest:string] {<\n>  cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'<\n>}<\n><\n># =============================================================================<\n>#<\n># Commands for zoxide. Disable these using --no-cmd.<\n>#<\n><\n>alias z = __zoxide_z<\n>alias zi = __zoxide_zi<\n><\n># =============================================================================<\n>#<\n># Add this to your env file (find it by running `$nu.env-path` in Nushell):<\n>#<\n>#   zoxide init nushell | save -f ~/.zoxide.nu<\n>#<\n># Now, add this to the end of your config file (find it by running<\n># `$nu.config-path` in Nushell):<\n>#<\n>#   source ~/.zoxide.nu<\n>#<\n># Note: zoxide only supports Nushell v0.89.0+.
z storage/
z
ls ~/.config
pkg update<\n>pkg install build-essential
pkg install cmake ninja clang unzip zip
git clone --depth 1 https://github.com/AstroNvim/template ~/.config/nvim<\n>rm -rf ~/.config/nvim/.git<\n>nvim
v
pkg install ripgrep nodejs
vi
pkg install fzf luarocks 
tmux
fzf
vi
z nvim
cd ~/.config/nvim/
vi
pkg install stylua
pkg install lua-language-server
pkg search lua_ls carapace
pkg search lua
pkg search harper
bat ~/storage/shared/documents/nvim/lua/community.lua
cat ~/storage/shared/documents/nvim/lua/community.lua
cat ~/storage/shared/documents/nvim/lua/lazy_setup.lua
cat ~/storage/shared/documents/nvim/lua/plugins/
v
vi 
vi .
mv ~/storage/shared/documents/rustlings/ ~
z
z 
cd
ls
mv ~/storage/shared/documents/nushell/  ~
z nu
z nushell/
zoxide nushell/
cd ~/ nushell/
v nushell/
pkg search gs
pkg search fd
pkg i fd/stable
bash v $PREFIX/etc/apt/sources.list.d<\n>deb [trusted=yes] https://termux.carapace.sh termux extras  
chsh -s nu
exit 
bash
exit 
pkg i ruby
exit 
$env.LANG
exit 
vi nushell/
apt update && apt install carapace-bin<\n>
apt update ; apt install carapace-bin<\n>
pkg update;pkg upgrade
apt update ; apt install carapace-bin<\n>
curl termux.carapace.sh | sh<\n>
deb [trusted=yes] https://termux.carapace.sh termux extras
config env 
$env.config.edit_mode
$env.config.edit_mode = "vi"
$env.config.explore
$env.config.EDITOR = nvim
$env.config.EDITOR = "nvim"
$env.config.EDITOR
$env.config.buffer_editor = nvim
$env.config.buffer_editor = "nvim"
config env 
$env.config.buffer_editor = "nvim"
apt update && apt install carapace-bin<\n>
apt update ; apt install carapace-bin<\n>
pkg search ad
pkg search carapa
v $env.PREFIX/etc/sources.list.d
v "$env.PREFIX"/etc/sources.list.d
vi /data/data/com.termux/files/usr/etc
exit 
pkg update;pkg upgrade
apt install carapace-bin
apt search carapace
z ~/storage/shared/documents/
ls
ls -a
z ~/storage/shared/documents/
zoxide  ~/storage/shared/documents/
cd  ~/storage/shared/documents/
ls
cd carapace/
ls
ls -a
cd specs/
ls
cd ../bridge/
ls
cd bash/
ls
cd ../../overlays/
ls
cd ../../
ls
apt-get install carapace-bin
vi /data/data/com.termux/files/usr/etc
exit 
pkg update;pkg upgrade
curl termux.carapace.sh | sh<\n>
apt-get install carapace
cd $env.PREFIX
ls
cd bin/
ls
cd carapace
./carapace
carapace 
cd
carapace nushell
carapace --shell nushell
carapace
config env 
$env.config.buffer_editor = "nvim"
config env 
def create_left_prompt [] {<\n>    let dir = match (do --ignore-shell-errors { $env.PWD | path relative-to $nu.home-path }) {<\n>        null => $env.PWD<\n>        '' => '~'<\n>        $relative_pwd => ([~ $relative_pwd] | path join)<\n>}}<\n><\n>
config env 
source-env 
source-env ~/.config/nushell/env.nu 
config env 
source-env ~/.config/nushell/env.nu 
config nu 
source-env ~/.config/nushell/config.nu 
source-env ~/.config/nushell/env.nu 
config env 
source-env ~/.config/nushell/env.nu 
config env 
config nu 
source-env ~/.config/nushell/env.nu 
source-env ~/.config/nushell/config.nu 
config nu 
source-env ~/.config/nushell/config.nu 
config nu 
z nushell
cd ~/.config/nvim/
cd ../nushell/
v config.nu
source-env ~/.config/nushell/config.nu 
z config.nu
zoxide nvi,
zoxide nvim
zoxide --help 
zoxide init
zoxide init nushell
# Code generated by zoxide. DO NOT EDIT.<\n><\n># =============================================================================<\n>#<\n># Hook configuration for zoxide.<\n>#<\n><\n># Initialize hook to add new entries to the database.<\n>export-env {<\n>  $env.config = (<\n>    $env.config?<\n>    | default {}<\n>    | upsert hooks { default {} }<\n>    | upsert hooks.env_change { default {} }<\n>    | upsert hooks.env_change.PWD { default [] }<\n>  )<\n>  let __zoxide_hooked = (<\n>    $env.config.hooks.env_change.PWD | any { try { get __zoxide_hook } catch { false } }<\n>  )<\n>  if not $__zoxide_hooked {<\n>    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {<\n>      __zoxide_hook: true,<\n>      code: {|_, dir| zoxide add -- $dir}<\n>    })<\n>  }<\n>}<\n><\n># =============================================================================<\n>#<\n># When using zoxide with --no-cmd, alias these internal functions as desired.<\n>#<\n><\n># Jump to a directory using only keywords.<\n>def --env --wrapped __zoxide_z [...rest: string] {<\n>  let path = match $rest {<\n>    [] => {'~'},<\n>    [ '-' ] => {'-'},<\n>    [ $arg ] if ($arg | path expand | path type) == 'dir' => {$arg}<\n>    _ => {<\n>      zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n"<\n>    }<\n>  }<\n>  cd $path<\n>}<\n><\n># Jump to a directory using interactive search.<\n>def --env --wrapped __zoxide_zi [...rest:string] {<\n>  cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'<\n>}<\n><\n># =============================================================================<\n>#<\n># Commands for zoxide. Disable these using --no-cmd.<\n>#<\n><\n>alias z = __zoxide_z<\n>alias zi = __zoxide_zi<\n><\n># =============================================================================<\n>#<\n># Add this to your env file (find it by running `$nu.env-path` in Nushell):<\n>#<\n>#   zoxide init nushell | save -f ~/.zoxide.nu<\n>#<\n># Now, add this to the end of your config file (find it by running<\n># `$nu.config-path` in Nushell):<\n>#<\n>#   source ~/.zoxide.nu<\n>#<\n># Note: zoxide only supports Nushell v0.89.0+.
vi
source-env ~/.config/nushell/config.nu 
z ~
source-env ~/.config/nushell/config.nu 
vi config.nu 
source-env ~/.config/nushell/config.nu 
z
^z
c
clear 
exit 
->
<=>>=<=>
----->
<-----
job id 
job list 
pkg update;pkg upgrade
pkg search joom
nmap -p- -sV rimnow.com
ls | sh 
ansi 
ansi --help 
> ansi green
ansi green
echo hi
echo hi | ansi green
v
vi
ls
ls nushell/
$env.PROMPT_INDICATOR
$env.PROMPT_INDICATOR = ""
$env.PROMPT_COMMAND
$env.PROMPT_COMMAND_RIGHT
$env.PROMPT_INDICATOR_VI_INSERT
$env.PROMPT_INDICATOR_VI_NORMAL
$env.PROMPT_COMMAND
{}
()
$env.PROMPT_MULTILINE_INDICATOR
$env.PROMPT_MULTILINE_INDICATOR = -->
$env.PROMPT_MULTILINE_INDICATOR
{<\n> hi:"hi", <\n> hi:"hi", <\n> hi:"hi", <\n> hi:[, <\n>}
{<\n> hi:"hi", <\n> hi:"hi", <\n> hi:"hi", <\n> hi:["gu","gu","gu","gu", "gu",<\n>"gu",]}
{<\n> hi:"hi", <\n> hi3:"hi", <\n> hi2:"hi", <\n> hi1:["gu","gu","gu","gu", "gu",<\n>"gu",]}
{<\n> hi:"hi", <\n> hi3:"hi", <\n> hi2:"hi", <\n> hi1:["gu","gu","gu","gu", "gu",<\n>"gu",]}.hi
{<\n>hi: [def hi [] {echo "hi"}]<\n>}
<\n>hi: [def hi [] {echo "hi"}]<\n>
<\n> [def hi [] {echo "hi"}]<\n>
[sg hj bj ]
z rustlings/
def cx [dir] { cd $dir; ls }
cx ..
def cx [dir] {{ cd $dir; ls }}
cx ..
def fcd [] { <\n>  try {<\n>    let dir = (fd . -t d -H | fzf)<\n>    if ($dir != null) {<\n>      cd $dir<\n>    }<\n>  } catch {<\n>    echo { hi: "error" }<\n>  }<\n>} 
fcd 
def f [] { echo (fd . -type f -not -path '*/.*' | fzf) | pbcopy }
f
f 
fd . -type f -not -path
fd . -type f -not -path .
$env.PKG_CONFIG_PATH = ($env.PREFIX | path join 'lib/pkgconfig')<\n>$env.PATH = ($env.PATH | split row (char esep) | prepend "/data/data/com.termux/files/home/.config/carapace/bin")<\n><\n>def --env get-env [name] { $env | get $name }<\n>def --env set-env [name, value] { load-env { $name: $value } }<\n>def --env unset-env [name] { hide-env $name }<\n><\n>let carapace_completer = {|spans|<\n>  # if the current command is an alias, get it's expansion<\n>  let expanded_alias = (scope aliases | where name == $spans.0 | get -i 0 | get -i expansion)<\n><\n>  # overwrite<\n>  let spans = (if $expanded_alias != null  {<\n>    # put the first word of the expanded alias first in the span<\n>    $spans | skip 1 | prepend ($expanded_alias | split row " " | take 1)<\n>  } else {<\n>    $spans<\n>  })<\n><\n>  carapace $spans.0 nushell ...$spans<\n>  | from json<\n>}<\n><\n>mut current = (($env | default {} config).config | default {} completions)<\n>$current.completions = ($current.completions | default {} external)<\n>$current.completions.external = ($current.completions.external<\n>| default true enable<\n>| default $carapace_completer completer)<\n><\n>$env.config = $current<\n>$env.PATH = ($env.PATH | append '/data/data/com.termux/files/home/.cargo/bin')<\n>source ~/.cache/carapace/init.nu
vi nushell/
source-env ~/.config/nushell/config.nu 
touch ~/.zoxide.nu
source-env ~/.config/nushell/config.nu 
zoxide init nushell 
# Code generated by zoxide. DO NOT EDIT.<\n><\n># =============================================================================<\n>#                                                                                                              # Hook configuration for zoxide.<\n>#<\n><\n># Initialize hook to add new entries to the database.<\n>export-env {<\n>  $env.config = (<\n>    $env.config?<\n>    | default {}<\n>    | upsert hooks { default {} }<\n>    | upsert hooks.env_change { default {} }<\n>    | upsert hooks.env_change.PWD { default [] }<\n>  )<\n>  let __zoxide_hooked = (<\n>    $env.config.hooks.env_change.PWD | any { try { get __zoxide_hook } catch { false } }<\n>  )<\n>  if not $__zoxide_hooked {<\n>    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {<\n>      __zoxide_hook: true,<\n>      code: {|_, dir| zoxide add -- $dir}<\n>    })<\n>  }<\n>}<\n><\n># =============================================================================<\n>#<\n># When using zoxide with --no-cmd, alias these internal functions as desired.<\n>#<\n><\n># Jump to a directory using only keywords.<\n>def --env --wrapped __zoxide_z [...rest: string] {<\n>  let path = match $rest {<\n>    [] => {'~'},<\n>    [ '-' ] => {'-'},<\n>    [ $arg ] if ($arg | path expand | path type) == 'dir' => {$arg}<\n>    _ => {<\n>      zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n"<\n>    }<\n>  }<\n>  cd $path<\n>}<\n><\n># Jump to a directory using interactive search.<\n>def --env --wrapped __zoxide_zi [...rest:string] {<\n>  cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'<\n>}<\n><\n># =============================================================================<\n>#<\n># Commands for zoxide. Disable these using --no-cmd.<\n>#<\n><\n>alias z = __zoxide_z<\n>alias zi = __zoxide_zi<\n><\n># =============================================================================<\n>#<\n># Add this to your env file (find it by running `$nu.env-path` in Nushell):<\n>#<\n>#   zoxide init nushell | save -f ~/.zoxide.nu<\n>#<\n># Now, add this to the end of your config file (find it by running<\n># `$nu.config-path` in Nushell):<\n>#<\n>#   source ~/.zoxide.nu<\n>#<\n># Note: zoxide only supports Nushell v0.89.0+.
__zoxide_z 
__zoxide_zi "$h"
__zoxide_zi "$a"
__zoxide_zi nushell/
__zoxide_z nushell/
source-env ~/.config/nushell/config.nu 
# Code generated by zoxide. DO NOT EDIT.<\n><\n># =============================================================================<\n>#                                                                                                              # Hook configuration for zoxide.<\n>#<\n><\n># Initialize hook to add new entries to the database.<\n>export-env {<\n>  $env.config = (<\n>    $env.config?<\n>    | default {}<\n>    | upsert hooks { default {} }<\n>    | upsert hooks.env_change { default {} }<\n>    | upsert hooks.env_change.PWD { default [] }<\n>  )<\n>  let __zoxide_hooked = (<\n>    $env.config.hooks.env_change.PWD | any { try { get __zoxide_hook } catch { false } }<\n>  )<\n>  if not $__zoxide_hooked {<\n>    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {<\n>      __zoxide_hook: true,<\n>      code: {|_, dir| zoxide add -- $dir}<\n>    })<\n>  }<\n>}<\n><\n># =============================================================================<\n>#<\n># When using zoxide with --no-cmd, alias these internal functions as desired.<\n>#<\n><\n># Jump to a directory using only keywords.<\n>def --env --wrapped __zoxide_z [...rest: string] {<\n>  let path = match $rest {<\n>    [] => {'~'},<\n>    [ '-' ] => {'-'},<\n>    [ $arg ] if ($arg | path expand | path type) == 'dir' => {$arg}<\n>    _ => {<\n>      zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n"<\n>    }<\n>  }<\n>  cd $path<\n>}<\n><\n># Jump to a directory using interactive search.<\n>def --env --wrapped __zoxide_zi [...rest:string] {<\n>  cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'<\n>}<\n><\n># =============================================================================<\n>#<\n># Commands for zoxide. Disable these using --no-cmd.<\n>#<\n><\n>alias z = __zoxide_z<\n>alias zi = __zoxide_zi<\n><\n># =============================================================================<\n>#<\n># Add this to your env file (find it by running `$nu.env-path` in Nushell):<\n>#<\n>#   zoxide init nushell | save -f ~/.zoxide.nu<\n>#<\n># Now, add this to the end of your config file (find it by running<\n># `$nu.config-path` in Nushell):<\n>#<\n>#   source ~/.zoxide.nu<\n>#<\n># Note: zoxide only supports Nushell v0.89.0+.
source-env ~/.config/nushell/config.nu 
deg
def 
def --env 
def --env -h
z nushell/
z ru
cd ~/rustlings/
l
source-env ~/.config/nushell/config.nu 
l
cd
zoxide import rustlings/
config nu 
source-env ~/.config/nushell/config.nu 
source-env ~/.config/nushell/env.nu 
z 
z ru
v .
echo hi | ansi green
exit 
l
z ru
v .
carapace 
carapace -h
carapace --help 
man ERR
man __
man
^man
rustlings
"Hi"|lines 
"Hi"
cat .bashrc 
cat .bashrc | lines 
cat .bashrc cat nushell/
cat .bashrc cat nushell/config.nu 
cat .bashrc cat nushell/config.nu | lines 
cat .bashrc cat nushell/config.nu --show-all | lines 
cat .bashrc cat nushell/config.nu --squeeze-blank  | lines 
cat .bashrc cat nushell/config.nu -E -T -v   | lines 
cat .bashrc cat nushell/config.nu -E -T -vA   | lines 
(cat .bashrc cat nushell/config.nu -E -T -vA   | lines )[2]
let a = (cat .bashrc cat nushell/config.nu -E -T -vA   | lines ) 
let a = ( cat nushell/config.nu -E -T -vA   | lines ) 
( cat nushell/config.nu -E -T -vA   | lines )[2]
( cat nushell/config.nu -E -T -vA   | lines ).
( cat nushell/config.nu -E -T -vA   | lines )| id 
( cat nushell/config.nu -E -T -vA   | lines )| input 
( cat nushell/config.nu -E -T -vA   | lines )| input b
( cat nushell/config.nu -E -T -vA   | lines )| input listen 
input 
input list 
input list "hi"
$0
echo $0
echo $a
echo $a[2]
echo $a.
z nu
z co/nu
up
cd ~/.config/nushell/
source-env ~/.config/nushell/config.nu 
i lua
source ~/.config/nushell/config.nu
i lua
pkg install man
v .
lua-language-server 
lua-language-server help
pkg install rust cargo
pkg install rust 
v .
pkg autoclean 
pkg clean 
apt autoremove
apt-cache xvcg 
z nv
v
v
l
curl https://github.com
up
input listen 
input 
v
npm install -g vscode-langservers-extracted  # لـ JavaScript, HTML, CSS
echo $a.
exit 
rm -rf .config/nvim/lua/plugins/mylsp.lua
v
pkg install wget<\n>wget https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-aarch64-linux.gz<\n>gunzip rust-analyzer-aarch64-linux.gz<\n>chmod +x rust-analyzer-aarch64-linux<\n>mv rust-analyzer-aarch64-linux ~/.local/bin/rust-analyzer
l
rm .wget-hsts
https://github.com/rust-lang/rust-analyzer/releases/download/2024-12-18/rust-analyzer-aarch64-linux.gz
cd ~<\n>wget https://github.com/rust-lang/rust-analyzer/releases/download/2024-12-18/rust-analyzer-aarch64-linux.gz<\n>gunzip rust-analyzer-aarch64-linux.gz<\n>chmod +x rust-analyzer-aarch64-linux<\n>mkdir -p ~/.local/bin<\n>mv rust-analyzer-aarch64-linux ~/.local/bin/rust-analyzer
cd ~<\n>wget https://github.com/rust-lang/rust-analyzer/releases/download/2024-12-18/rust-analyzer-aarch64-linux.gz<\n>gunzip rust-analyzer-aarch64-linux.gz<\n>chmod +x rust-analyzer-aarch64-linux<\n>mkdir  ~/.local/bin<\n>mv rust-analyzer-aarch64-linux ~/.local/bin/rust-analyzer
v .bashrc 
l
rm -rf .ni*
rm -rf .nix/
rm -rf .nix/ --force 
rm -rf .nix/ --trash 
bash
ps
rm -rf .nix/ 
chmod -R 777 .nix/
rm -rf .nix/ 
l
rm -rf .wget-hsts
up
exit 
curl -L https://nixos.org/nix/install | sh -s -- --daemon
# إزالة التثبيت الحالي<\n>rm -rf /nix ~/.nix-profile ~/.nix-defexpr ~/.nix-channels<\n><\n># تثبيت Nix بنظام المستخدم الواحد<\n>sh <(curl -L https://nixos.org/nix/install) --no-daemon
l
v innix.sh
chmod +x innix.sh 
./innix.sh
v innix.sh
./innix.sh
bash
chmod +x innix.sh 
chmod -R 777 .nix/
# إزالة التثبيت الحالي<\n>rm -rf /nix ~/.nix-profile ~/.nix-defexpr ~/.nix-channels<\n><\n># تثبيت Nix بنظام المستخدم الواحد
rm -rf ~/.nix<\n>rm -rf ~/nix-binary-tarball-unpack.*<\n>rm -rf ~/proot-distro
l
rm innix.sh nix-in-termux
rm .wget-hsts
l
v
pkg i ripgrep
pkg search btop
pkg search bottom
up
v
git clone https://github.com/NvChad/starter ~/.config/nvchad
NVIM_APPNAME
NVIM_APPNAME = nvchad nvim
NVIM_APPNAME=nvchad nvim
# Linux / MacOS (unix)<\n>rm -rf ~/.config/nvim<\n>rm -rf ~/.local/state/nvim<\n>rm -rf ~/.local/share/nvim<\n><\n># Flatpak (linux)<\n>rm -rf ~/.var/app/io.neovim.nvim/config/nvim<\n>rm -rf ~/.var/app/io.neovim.nvim/data/nvim<\n>rm -rf ~/.var/app/io.neovim.nvim/.local/state/nvim<\n><\n># Windows CMD<\n>rd -r ~\AppData\Local\nvim<\n>rd -r ~\AppData\Local\nvim-data<\n><\n># Windows PowerShell<\n>rm -Force ~\AppData\Local\nvim<\n>rm -Force ~\AppData\Local\nvim-data<\n>
NVIM_APPNAME=nvchad nvim
# Linux / MacOS (unix)<\n>rm -rf ~/.config/nvim<\n>rm -rf ~/.local/state/nvim<\n>rm -rf ~/.local/share/nvim<\n><\n># Flatpak (linux)<\n>rm -rf ~/.var/app/io.neovim.nvim/config/nvim<\n>rm -rf ~/.var/app/io.neovim.nvim/data/nvim<\n>rm -rf ~/.var/app/io.neovim.nvim/.local/state/nvim<\n><\n># Windows CMD<\n>rd -r ~\AppData\Local\nvim<\n>rd -r ~\AppData\Local\nvim-data<\n><\n># Windows PowerShell<\n>rm -Force ~\AppData\Local\nvim<\n>rm -Force ~\AppData\Local\nvim-data<\n>
rm -rf ~/.config/nvim/ ~/.config/nvchad/
git clone https://github.com/NvChad/starter ~/.config/nvim
v
mv ~/.local/share/nvim ~/.local/share/nvim.bak<\n>mv ~/.local/state/nvim ~/.local/state/nvim.bak<\n>mv ~/.cache/nvim ~/.cache/nvim.bak
cd .local/
l
l *
l */*
rm -rf share/nvchad/ share/nvim/ share/nvim.bak/
rm -rf state//nvchad/ state/nvim/ state//nvim.bak/
l
l */*
z
z .cache/
l
rm -rf nvim/ nvim.bak/ nvchad/ nix/ 
l
z
v
z .cache/
l
exit 
v
z r
cargo run
cargo clippy 
cargo search rust-ana
cargo install rust-analyser
ps
cargo search nvim neovim
cargo install rustlings
cargo install rust-analyser
z
l
v rust.sh
chmod +x rust.sh 
./rust.sh
cargo install rust-analyser
cargo search nvim neovim
cargo search nvim neovim --color always --limit 100
cargo install --example ERR
cargo new tryrust
z tr
z tryrust/
cargo install rust-analyser
cargo update 
cargo r 
cargo r --all-features 
cargo r --all-features ;
z
v n.js
v n.py
timeit --help 
pkg search time
pkg i time/stable
time node n.js
cd 
cd tryrust/
tic 
time cargo run
cd 
python n.py 
time python n.py 
l
./target/debug/tryrust
time ./target/debug/tryrust
exit 
node n.js 
v n.js 
# required<\n>mv ~/.config/nvim{,.bak}<\n><\n># optional but recommended<\n> rm -rf ~/.local/share/nvim<\n> rm ~/.local/state/nvim -rf<\n>rm ~/.cache/nvim -rf 
# required<\n>rm -rf ~/.config/nvim<\n><\n># optional but recommended<\n> rm -rf ~/.local/share/nvim<\n> rm ~/.local/state/nvim -rf<\n>rm ~/.cache/nvim -rf 
# required<\n>mv ~/.config/nvim{,.bak}<\n><\n># optional but recommended<\n>mv ~/.local/share/nvim{,.bak}<\n>mv ~/.local/state/nvim{,.bak}<\n>mv ~/.cache/nvim{,.bak}
git clone https://github.com/LazyVim/starter ~/.config/nvim
rm -rf ~/.config/nvim/.git
c
pkg install which
curl -o /data/data/com.termux/files/usr/bin/install-in-mason  https://raw.githubusercontent.com/Amirulmuuminin/setup-mason-for-termux/main/install-in-mason
chmod +x /data/data/com.termux/files/usr/bin/install-in-mason
install-in-mason lua-language-server
v
install-in-mason rust-analyser
install-in-mason rust-analyzer
v
exit 
exit 
i lua
exit 
install-in-mason --
s junk
s termux
git clone https://github.com/ArjunCodesmith/termux-junk-cleaner.git
de
def cln []{<\n>chmod +x ~/termux-junk-cleaner/termux-junk-cleaner.sh ;<\n>~/termux-junk-cleaner/termux-junk-cleaner.sh<\n>}
def cln []{<\n>chmod +x ~/termux-junk-cleaner/termux-junk-cleaner.sh ;<\n>./termux-junk-cleaner.sh<\n>}
def cln []{ cd ~/termux-junk-cleaner/<\n>chmod +x ~/termux-junk-cleaner/termux-junk-cleaner.sh ;<\n>./termux-junk-cleaner.sh<\n>}
def cln []{ cd ~/termux-junk-cleaner/<\n>chmod +x ~/termux-junk-cleaner/termux-junk-cleaner.sh ;<\n>./termux-junk-cleaner.sh -a<\n>} 
def cln []{ cd ~/termux-junk-cleaner/<\n>chmod +x ~/termux-junk-cleaner/termux-junk-cleaner.sh ;<\n>./termux-junk-cleaner.sh -a ;<\n> } 
def cln []{ cd ~/termux-junk-cleaner/<\n>./termux-junk-cleaner.sh -a ;<\n> } 
def cln []{ cd ~/termux-junk-cleaner/<\n> }
def cln []{<\n> cd ~/termux-junk-cleaner/;<\n> ~/termux-junk-cleaner/termux-junk-cleaner.sh<\n>} 
chmod +x ~/termux-junk-cleaner/termux-junk-cleaner.sh 
~/termux-junk-cleaner/termux-junk-cleaner.sh
def cln []{ ~/termux-junk-cleaner/termux-junk-cleaner.sh}
def cln [] { ~/termux-junk-cleaner/termux-junk-cleaner.sh }
cln 
cln -a
def cln [] { ~/termux-junk-cleaner/termux-junk-cleaner.sh -a}
cln 
git clone https://github.com/nushell/nu_plugin_template.git
z nu_plugin_template/
plugin --help 
ccd 
z
plugin add nu_plugin_template/
plugin add nu_plugin_template
chmod +x nu_plugin_template/
plugin add nu_plugin_template
l
rm -rf nu_plugin_template/ rust.sh tryrust/  
l
ansi gradient 
ansi gradient --help 
'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff'
'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x40c9ff'
'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x40cf'
'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x49c90f' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x40c55f'
'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x49c90f' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x49c55f'
'Hello, Nushell! This is a gradient.' | ansi gradient --fgstart '0x40c9ff'<\n>
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend '0xe81cff'<\n>
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend '0xe8ff'<\n>
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend '0xe8ff00'<\n>
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend '0xe9ff00'<\n>
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend '0x09ff00'<\n>
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend 0x09ff00
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend 0x090f00
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend 0xf90f00
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend 0xf90f0f
'Hello, Nushell! This is a gradient.' | ansi gradient --fgend 0xf90fff
ls | ansi gradient --fgstart '0x49c90f' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x40c55f'
"(ls)" | ansi gradient --fgstart '0x49c90f' --fgend '0xe81cff' --bgstart '0xe81cff' --bgend '0x40c55f'
...{}
.{}.
{}
[]
ansi link 
ansi link --help 
s ansi
v
z ex
cd ~/rustlings/exercises/17_tests/
cd
z t
z
z  17
z r
cln
c
z
l
z r/stru
cd ~/rustlings/exercises/07_structs/
z
z r/stru
z r
z s
fzf --preview 'bat --style=numbers --color=always {}'
i bat
fzf --preview 'bat --style=numbers --color=always {}'
z
fzf --preview 'bat --style=numbers --color=always {}'
bat 
bat --help 
rustlings
tldt
tldr
s tldr
fzf
fzf --preview 'bat --style=numbers --color=always {}'
z
v
nvim +Man bat
l
whoami 
exit 
telnet 
telnet --help 
v
exit 
ps
z r
rustlings
rustc --explain E0277
rustlings
exit 
z nv
v README.md 
z
mkdir .dotfiles
z .dotfiles/
l
l ~
s stow
up
i stow
tldr
s tldr
l ~
z
mv .bashrc .bashrc.bak
cp .bashrc.bak .dotfiles/
z .dotfiles/
l
mv .bashrc.bak .bashrc
stow .
l
cd
l
git 
z .dotfiles/
git init .
l
stow .
l 
l ~
z
v .stow-local-ignore
rm .ssh/
`<\n>hi <\n>`
z .dotfiles/
start .bashrc
stow --adopt .
l
l ~
cd ./.bashrc
cd ./.bashrc/../
cd ./.bashrc/../z
z
l
z nushell/
l
v
z .d
mkdir .config
cd .config/
l
cp ~/.config/nushell/ .
cp ~/.config/nushell/ . --recursive 
l
..
l
stow --adopt .
l ~
l ~/.config/
cd
diff --help 
diff .dotfiles/.config/nushell/ ~/.config/nushell/
diff .dotfiles/.config/nushell/config.nu  ~/.config/nushell/config.nu  
z ~/.config/nushell/config.nu
z ~/.config/nushell/config.nu/.
z ~/.config/nushell/config.nu/../
v config.nu 
diff ~/.dotfiles/.config/nushell/config.nu  ~/.config/nushell/config.nu  
z
fzf 
fzf --preview 'bat --style=numbers --color=always {}'
z .d
